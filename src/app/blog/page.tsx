"use client";

import { useState } from "react";
import Link from "next/link";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import { blogPosts, getFeaturedPosts } from "@/data/blog-posts";

export default function BlogPage() {
  const [selectedCategory, setSelectedCategory] = useState("T·∫•t c·∫£");
  const [searchTerm, setSearchTerm] = useState("");

  // L·∫•y c√°c categories ƒë·ªôc ƒë√°o t·ª´ d·ªØ li·ªáu
  const categories = [
    "T·∫•t c·∫£",
    ...Array.from(new Set(blogPosts.map((post) => post.category))),
  ];

  // L·ªçc b√†i vi·∫øt theo category v√† search term
  const filteredPosts = blogPosts.filter((post) => {
    const matchesCategory =
      selectedCategory === "T·∫•t c·∫£" || post.category === selectedCategory;
    const matchesSearch =
      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.excerpt.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.tags.some((tag) =>
        tag.toLowerCase().includes(searchTerm.toLowerCase())
      );

    return matchesCategory && matchesSearch;
  });

  const featuredPosts = getFeaturedPosts();
  const getPostCount = (category: string) => {
    if (category === "T·∫•t c·∫£") return blogPosts.length;
    return blogPosts.filter((post) => post.category === category).length;
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  const getImageForPost = (post: {
    category: string;
    tags: string[];
  }): string => {
    // T·∫°o emoji d·ª±a tr√™n category ho·∫∑c tags
    if (post.tags.includes("master numbers")) return "‚≠ê";
    if (post.tags.includes("l√£nh ƒë·∫°o")) return "üëë";
    if (post.tags.includes("s√°ng t·∫°o")) return "üé®";
    if (post.tags.includes("t·ªï ch·ª©c")) return "üìã";
    if (post.tags.includes("t·ª± do")) return "üåç";
    if (post.tags.includes("h·ª£p t√°c")) return "ü§ù";
    if (post.category.includes("tr·∫ª em")) return "üë∂";
    if (post.category.includes("n√¢ng cao")) return "üîÆ";
    if (post.category.includes("h∆∞·ªõng d·∫´n")) return "üìñ";
    return "üî¢";
  };

  const getColorForPost = (post: {
    category: string;
    tags: string[];
  }): string => {
    // T·∫°o m√†u gradient d·ª±a tr√™n category
    if (post.category.includes("tr·∫ª em")) return "from-pink-500 to-rose-500";
    if (post.category.includes("n√¢ng cao"))
      return "from-purple-500 to-indigo-500";
    if (post.category.includes("h∆∞·ªõng d·∫´n")) return "from-blue-500 to-cyan-500";
    if (post.tags.includes("master numbers"))
      return "from-yellow-500 to-orange-500";
    return "from-green-500 to-emerald-500";
  };

  return (
    <div className="min-h-screen">
      <Header />
      <main className="max-w-6xl mx-auto p-6 py-8 space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            Blog Th·∫ßn S·ªë H·ªçc
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            Kh√°m ph√° ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ th·∫ßn s·ªë h·ªçc t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao.
            Hi·ªÉu r√µ h∆°n v·ªÅ b·∫£n th√¢n v√† c√°ch ·ª©ng d·ª•ng th·∫ßn s·ªë h·ªçc trong cu·ªôc
            s·ªëng.
          </p>
        </div>

        {/* Search */}
        <div className="max-w-md mx-auto">
          <Input
            type="text"
            placeholder="T√¨m ki·∫øm b√†i vi·∫øt..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>

        {/* Categories */}
        <div className="flex flex-wrap gap-2 justify-center">
          {categories.map((category) => (
            <Badge
              key={category}
              variant={selectedCategory === category ? "default" : "secondary"}
              className="px-4 py-2 cursor-pointer hover:bg-primary hover:text-primary-foreground transition-colors"
              onClick={() => setSelectedCategory(category)}
            >
              {category} ({getPostCount(category)})
            </Badge>
          ))}
        </div>

        {/* Featured Posts */}
        {selectedCategory === "T·∫•t c·∫£" &&
          searchTerm === "" &&
          featuredPosts.length > 0 && (
            <div className="space-y-6">
              <h2 className="text-2xl font-bold text-center">
                üìå B√†i vi·∫øt n·ªïi b·∫≠t
              </h2>
              <Card className="bg-gradient-to-r from-purple-50 to-pink-50 border-0 shadow-lg">
                <CardHeader className="text-center">
                  <Badge variant="secondary" className="w-fit mx-auto mb-2">
                    {featuredPosts[0].category} ‚Ä¢ {featuredPosts[0].readTime}{" "}
                    ph√∫t ƒë·ªçc
                  </Badge>
                  <CardTitle className="text-3xl max-w-3xl mx-auto">
                    {featuredPosts[0].title}
                  </CardTitle>
                  <CardDescription className="text-lg max-w-2xl mx-auto">
                    {featuredPosts[0].excerpt}
                  </CardDescription>
                  <div className="text-sm text-muted-foreground">
                    {formatDate(featuredPosts[0].publishDate)}
                  </div>
                </CardHeader>
                <CardContent className="text-center">
                  <Link href={`/blog/${featuredPosts[0].id}`}>
                    <div
                      className={`w-32 h-32 mx-auto rounded-full bg-gradient-to-r ${getColorForPost(
                        featuredPosts[0]
                      )} flex items-center justify-center text-5xl mb-4 hover:scale-105 transition-transform`}
                    >
                      {getImageForPost(featuredPosts[0])}
                    </div>
                    <Badge
                      variant="outline"
                      className="px-6 py-2 text-base hover:bg-primary hover:text-primary-foreground transition-colors"
                    >
                      ƒê·ªçc b√†i vi·∫øt ‚Üí
                    </Badge>
                  </Link>
                </CardContent>
              </Card>
            </div>
          )}

        {/* Search Results */}
        {searchTerm && (
          <div className="text-center">
            <p className="text-muted-foreground">
              T√¨m th·∫•y {filteredPosts.length} b√†i vi·∫øt cho &quot;{searchTerm}
              &quot;
            </p>
          </div>
        )}

        {/* Blog Posts Grid */}
        <div className="space-y-6">
          {selectedCategory !== "T·∫•t c·∫£" || searchTerm !== "" ? (
            <h2 className="text-2xl font-bold text-center">
              {selectedCategory !== "T·∫•t c·∫£"
                ? `üìö ${selectedCategory}`
                : "üîç K·∫øt qu·∫£ t√¨m ki·∫øm"}
            </h2>
          ) : (
            <h2 className="text-2xl font-bold text-center">
              üìñ T·∫•t c·∫£ b√†i vi·∫øt
            </h2>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredPosts.map((post) => (
              <Link key={post.id} href={`/blog/${post.id}`} className="block">
                <Card className="h-full hover:shadow-lg transition-all duration-300 hover:-translate-y-1 cursor-pointer">
                  <CardHeader className="pb-4">
                    <div className="flex items-center justify-between mb-2">
                      <Badge variant="secondary" className="text-xs">
                        {post.category}
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        {post.readTime} ph√∫t
                      </span>
                    </div>
                    <div
                      className={`w-16 h-16 rounded-full bg-gradient-to-r ${getColorForPost(
                        post
                      )} flex items-center justify-center text-2xl mb-3`}
                    >
                      {getImageForPost(post)}
                    </div>
                    <CardTitle className="text-lg line-clamp-2">
                      {post.title}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <CardDescription className="line-clamp-3 mb-4">
                      {post.excerpt}
                    </CardDescription>

                    <div className="flex flex-wrap gap-1 mb-4">
                      {post.tags.slice(0, 3).map((tag, index) => (
                        <Badge
                          key={index}
                          variant="outline"
                          className="text-xs"
                        >
                          {tag}
                        </Badge>
                      ))}
                    </div>

                    <div className="flex items-center justify-between">
                      <span className="text-xs text-muted-foreground">
                        {formatDate(post.publishDate)}
                      </span>
                      <Badge
                        variant="outline"
                        className="text-xs hover:bg-primary hover:text-primary-foreground transition-colors"
                      >
                        ƒê·ªçc th√™m ‚Üí
                      </Badge>
                    </div>
                  </CardContent>
                </Card>
              </Link>
            ))}
          </div>
        </div>

        {/* No Results */}
        {filteredPosts.length === 0 && (
          <Card>
            <CardContent className="text-center py-12">
              <div className="text-6xl mb-4">üìù</div>
              <h3 className="text-xl font-semibold mb-2">
                Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt
              </h3>
              <p className="text-muted-foreground">
                H√£y th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a kh√°c ho·∫∑c ch·ªçn category kh√°c.
              </p>
            </CardContent>
          </Card>
        )}

        {/* Newsletter Signup */}
        <Card className="bg-gradient-to-r from-blue-600 to-purple-600 text-white border-0">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl">üì¨ ƒêƒÉng k√Ω nh·∫≠n tin t·ª©c</CardTitle>
            <CardDescription className="text-blue-100">
              Nh·∫≠n nh·ªØng b√†i vi·∫øt m·ªõi nh·∫•t v·ªÅ th·∫ßn s·ªë h·ªçc v√† c√°c m·∫πo h·ªØu √≠ch
            </CardDescription>
          </CardHeader>
          <CardContent className="text-center">
            <div className="flex flex-col sm:flex-row gap-3 max-w-md mx-auto">
              <Input
                type="email"
                placeholder="Email c·ªßa b·∫°n"
                className="flex-1 text-gray-900 placeholder-gray-500"
              />
              <button className="px-6 py-2 bg-white text-blue-600 rounded-md font-medium hover:bg-gray-100 transition-colors">
                ƒêƒÉng k√Ω
              </button>
            </div>
          </CardContent>
        </Card>

        {/* About Section */}
        <Card className="bg-gradient-to-r from-green-50 to-emerald-50">
          <CardHeader>
            <CardTitle className="text-center text-green-600">
              üìö V·ªÅ blog th·∫ßn s·ªë h·ªçc Numerious
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="font-semibold text-green-700 mb-2">
                  üéØ M·ª•c ti√™u c·ªßa ch√∫ng t√¥i:
                </h4>
                <p className="text-sm text-green-600">
                  Cung c·∫•p ki·∫øn th·ª©c ch√≠nh x√°c v√† d·ªÖ hi·ªÉu v·ªÅ th·∫ßn s·ªë h·ªçc, gi√∫p
                  m·ªçi ng∆∞·ªùi hi·ªÉu r√µ h∆°n v·ªÅ b·∫£n th√¢n v√† ·ª©ng d·ª•ng trong cu·ªôc s·ªëng
                  h√†ng ng√†y.
                </p>
              </div>
              <div>
                <h4 className="font-semibold text-green-700 mb-2">
                  ‚ú® N·ªôi dung ch·∫•t l∆∞·ª£ng:
                </h4>
                <p className="text-sm text-green-600">
                  T·∫•t c·∫£ b√†i vi·∫øt ƒë·ªÅu ƒë∆∞·ª£c nghi√™n c·ª©u k·ªπ l∆∞·ª°ng, d·ª±a tr√™n ki·∫øn
                  th·ª©c th·∫ßn s·ªë h·ªçc truy·ªÅn th·ªëng v√† kinh nghi·ªám th·ª±c t·∫ø t·ª´ c√°c
                  chuy√™n gia.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
      <Footer />
    </div>
  );
}
