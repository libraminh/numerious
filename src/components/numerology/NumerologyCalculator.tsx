"use client";

import { useEffect, useRef, useState } from "react";
import type { FormEvent } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  calculateAllNumbers,
  analyzeName,
  NumerologyResult,
  NameAnalysis,
} from "@/lib/numerology";
import { numberMeanings, masterNumbers } from "@/data/numerology-data";
import {
  getBlogPostUrlForNumber,
  hasBlogPostForNumber,
} from "@/lib/blog-utils";
import NumerologyReport from "./NumerologyReport";
import Link from "next/link";

export default function NumerologyCalculator() {
  const [fullName, setFullName] = useState("");
  const [birthDate, setBirthDate] = useState("");
  const [results, setResults] = useState<NumerologyResult | null>(null);
  const [nameAnalysis, setNameAnalysis] = useState<NameAnalysis | null>(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [selectedNumber, setSelectedNumber] = useState<number | null>(null);
  const [showReport, setShowReport] = useState(false);

  const resultsRef = useRef<HTMLDivElement | null>(null);
  const detailRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    if (results && resultsRef.current) {
      resultsRef.current.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  }, [results]);

  useEffect(() => {
    if (selectedNumber && detailRef.current) {
      detailRef.current.scrollIntoView({ behavior: "smooth", block: "start" });
    }
  }, [selectedNumber]);

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!fullName || !birthDate || isCalculating) return;
    handleCalculate();
  };

  const handleCalculate = () => {
    if (!fullName || !birthDate) return;

    setIsCalculating(true);

    try {
      const date = new Date(birthDate);
      const numerologyResults = calculateAllNumbers(date, fullName);
      const nameResults = analyzeName(fullName);

      setResults(numerologyResults);
      setNameAnalysis(nameResults);
    } catch (error) {
      console.error("L·ªói t√≠nh to√°n:", error);
    } finally {
      setIsCalculating(false);
    }
  };

  const getNumberMeaning = (number: number) => {
    const meaning = numberMeanings.find((m) => m.number === number);
    const masterMeaning = masterNumbers.find((m) => m.number === number);
    return masterMeaning || meaning;
  };

  // const formatDate = (dateString: string) => {
  //   const date = new Date(dateString);
  //   return date.toLocaleDateString("vi-VN", {
  //     day: "2-digit",
  //     month: "2-digit",
  //     year: "numeric",
  //   });
  // };

  const handleNumberClick = (number: number) => {
    setSelectedNumber(selectedNumber === number ? null : number);
  };

  const getNumberColor = (number: number) => {
    if (masterNumbers.find((m) => m.number === number)) {
      return "from-purple-600 to-pink-600";
    }
    switch (number) {
      case 1:
        return "from-red-600 to-orange-600";
      case 2:
        return "from-blue-600 to-cyan-600";
      case 3:
        return "from-green-600 to-emerald-600";
      case 4:
        return "from-yellow-600 to-orange-600";
      case 5:
        return "from-purple-600 to-indigo-600";
      case 6:
        return "from-pink-600 to-rose-600";
      case 7:
        return "from-indigo-600 to-blue-600";
      case 8:
        return "from-gray-600 to-slate-600";
      case 9:
        return "from-amber-600 to-yellow-600";
      default:
        return "from-gray-600 to-slate-600";
    }
  };

  const handleGenerateReport = () => {
    setShowReport(true);
  };

  const handleBackToCalculator = () => {
    setShowReport(false);
  };

  // N·∫øu ƒëang hi·ªÉn th·ªã b√°o c√°o, render component b√°o c√°o
  if (showReport && results && nameAnalysis) {
    return (
      <div className="space-y-6">
        <div className="text-center">
          <Button
            onClick={handleBackToCalculator}
            variant="outline"
            className="mb-6"
          >
            ‚Üê Quay l·∫°i m√°y t√≠nh
          </Button>
        </div>
        <NumerologyReport
          fullName={fullName}
          birthDate={birthDate}
          results={results}
          nameAnalysis={nameAnalysis}
        />
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-6 space-y-6">
      <div className="text-center space-y-4">
        <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
          M√°y T√≠nh Th·∫ßn S·ªë H·ªçc
        </h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Kh√°m ph√° b√≠ ·∫©n c·ªßa c√°c con s·ªë trong cu·ªôc s·ªëng b·∫°n. Nh·∫≠p t√™n v√† ng√†y
          sinh ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch chi ti·∫øt v·ªÅ con s·ªë ch·ªß ƒë·∫°o, s·ªë linh h·ªìn v√†
          nhi·ªÅu h∆°n n·ªØa.
        </p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Th√¥ng tin c√° nh√¢n</CardTitle>
          <CardDescription>
            Nh·∫≠p h·ªç t√™n ƒë·∫ßy ƒë·ªß v√† ng√†y sinh ƒë·ªÉ t√≠nh to√°n
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="fullName">H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß</Label>
              <Input
                id="fullName"
                placeholder="V√≠ d·ª•: Nguy·ªÖn VƒÉn An"
                value={fullName}
                onChange={(e) => setFullName(e.target.value)}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="birthDate">Ng√†y sinh</Label>
              <Input
                id="birthDate"
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
              />
            </div>

            <Button
              type="submit"
              disabled={!fullName || !birthDate || isCalculating}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700"
            >
              {isCalculating ? "ƒêang t√≠nh to√°n..." : "T√≠nh to√°n th·∫ßn s·ªë h·ªçc"}
            </Button>
          </form>
        </CardContent>
      </Card>

      {results && (
        <div ref={resultsRef} className="space-y-6">
          {/* K·∫øt qu·∫£ ch√≠nh */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                K·∫øt qu·∫£ th·∫ßn s·ªë h·ªçc
                {results.isMasterNumber && (
                  <Badge variant="destructive" className="animate-pulse">
                    Master Number
                  </Badge>
                )}
              </CardTitle>
              <CardDescription>
                Ph√¢n t√≠ch chi ti·∫øt c√°c con s·ªë quan tr·ªçng trong cu·ªôc s·ªëng b·∫°n
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div
                  className="text-center p-4 border rounded-lg cursor-pointer hover:shadow-lg transition-all duration-300 hover:scale-105"
                  onClick={() => handleNumberClick(results.lifePathNumber)}
                >
                  <div
                    className={`text-3xl font-bold mb-2 bg-gradient-to-r ${getNumberColor(
                      results.lifePathNumber
                    )} bg-clip-text text-transparent`}
                  >
                    {results.lifePathNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë Ch·ªß ƒê·∫°o</div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {getNumberMeaning(results.lifePathNumber)?.title}
                  </div>
                  <div className="text-xs text-blue-500 mt-2">
                    üëÜ Click ƒë·ªÉ xem chi ti·∫øt
                  </div>
                </div>

                <div
                  className="text-center p-4 border rounded-lg cursor-pointer hover:shadow-lg transition-all duration-300 hover:scale-105"
                  onClick={() => handleNumberClick(results.soulNumber)}
                >
                  <div
                    className={`text-3xl font-bold mb-2 bg-gradient-to-r ${getNumberColor(
                      results.soulNumber
                    )} bg-clip-text text-transparent`}
                  >
                    {results.soulNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë Linh H·ªìn</div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {getNumberMeaning(results.soulNumber)?.title}
                  </div>
                  <div className="text-xs text-blue-500 mt-2">
                    üëÜ Click ƒë·ªÉ xem chi ti·∫øt
                  </div>
                </div>

                <div
                  className="text-center p-4 border rounded-lg cursor-pointer hover:shadow-lg transition-all duration-300 hover:scale-105"
                  onClick={() => handleNumberClick(results.expressionNumber)}
                >
                  <div
                    className={`text-3xl font-bold mb-2 bg-gradient-to-r ${getNumberColor(
                      results.expressionNumber
                    )} bg-clip-text text-transparent`}
                  >
                    {results.expressionNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë Bi·ªÉu ƒê·∫°t</div>
                  <div className="text-xs text-muted-foreground mt-1">
                    {getNumberMeaning(results.expressionNumber)?.title}
                  </div>
                  <div className="text-xs text-blue-500 mt-2">
                    üëÜ Click ƒë·ªÉ xem chi ti·∫øt
                  </div>
                </div>

                <div className="text-center p-4 border rounded-lg">
                  <div className="text-2xl font-bold text-green-600 mb-2">
                    {results.birthdayNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë Sinh Nh·∫≠t</div>
                </div>

                <div className="text-center p-4 border rounded-lg">
                  <div className="text-2xl font-bold text-orange-600 mb-2">
                    {results.attitudeNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë Th√°i ƒê·ªô</div>
                </div>

                <div className="text-center p-4 border rounded-lg">
                  <div className="text-2xl font-bold text-indigo-600 mb-2">
                    {results.personalYearNumber}
                  </div>
                  <div className="text-sm font-medium">S·ªë NƒÉm C√° Nh√¢n</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* N√∫t t·∫°o b√°o c√°o t·ªïng h·ª£p */}
          <Card className="bg-gradient-to-r from-green-50 to-emerald-50 border-green-200">
            <CardContent className="text-center py-8">
              <div className="space-y-4">
                <div className="text-4xl">üìã</div>
                <h3 className="text-xl font-semibold text-green-700">
                  Mu·ªën c√≥ c√°i nh√¨n t·ªïng qu√°t h∆°n?
                </h3>
                <p className="text-gray-600 max-w-md mx-auto">
                  T·∫°o b√°o c√°o chi ti·∫øt t·ªïng h·ª£p t·∫•t c·∫£ c√°c con s·ªë v√† ph√¢n t√≠ch
                  d∆∞·ªõi d·∫°ng m·ªôt b√†i blog d·ªÖ ƒë·ªçc v√† d·ªÖ hi·ªÉu.
                </p>
                <Button
                  onClick={handleGenerateReport}
                  size="lg"
                  className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-8 py-3"
                >
                  üìä T·∫°o B√°o C√°o T·ªïng H·ª£p
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Th√¥ng tin chi ti·∫øt s·ªë ƒë∆∞·ª£c ch·ªçn */}
          {selectedNumber && getNumberMeaning(selectedNumber) && (
            <div ref={detailRef}>
              <Card className="bg-gradient-to-r from-blue-50 to-cyan-50 border-2 border-blue-200">
                <CardHeader className="text-center">
                  <div className="flex items-center justify-center gap-4 mb-4">
                    <div
                      className={`w-20 h-20 rounded-full flex items-center justify-center text-4xl font-bold bg-gradient-to-r ${getNumberColor(
                        selectedNumber
                      )} text-white`}
                    >
                      {selectedNumber}
                    </div>
                    {masterNumbers.find((m) => m.number === selectedNumber) && (
                      <Badge
                        variant="destructive"
                        className="text-sm px-3 py-1"
                      >
                        Master Number
                      </Badge>
                    )}
                  </div>
                  <CardTitle className="text-2xl text-blue-600">
                    {getNumberMeaning(selectedNumber)?.title}
                  </CardTitle>
                  <CardDescription className="text-lg max-w-3xl mx-auto">
                    {getNumberMeaning(selectedNumber)?.description}
                  </CardDescription>
                </CardHeader>

                <CardContent className="space-y-6">
                  {/* T·ª´ kh√≥a ch√≠nh */}
                  <div>
                    <h3 className="text-xl font-semibold mb-3 text-center text-blue-600">
                      T·ª´ kh√≥a ch√≠nh
                    </h3>
                    <div className="flex flex-wrap gap-2 justify-center">
                      {getNumberMeaning(selectedNumber)?.keywords.map(
                        (keyword, index) => (
                          <Badge
                            key={index}
                            variant="secondary"
                            className="px-3 py-1 text-sm"
                          >
                            {keyword}
                          </Badge>
                        )
                      )}
                    </div>
                  </div>

                  <Separator />

                  {/* ƒêi·ªÉm m·∫°nh v√† th√°ch th·ª©c */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <h3 className="text-xl font-semibold text-green-600 text-center">
                        ƒêi·ªÉm m·∫°nh
                      </h3>
                      <ul className="space-y-2">
                        {getNumberMeaning(selectedNumber)?.strengths.map(
                          (strength, index) => (
                            <li
                              key={index}
                              className="flex items-center gap-3 p-3 bg-green-50 rounded-lg"
                            >
                              <span className="text-green-500 text-lg mt-0.5">
                                ‚úì
                              </span>
                              <span className="text-sm">{strength}</span>
                            </li>
                          )
                        )}
                      </ul>
                    </div>

                    <div className="space-y-3">
                      <h3 className="text-xl font-semibold text-orange-600 text-center">
                        Th√°ch th·ª©c
                      </h3>
                      <ul className="space-y-2">
                        {getNumberMeaning(selectedNumber)?.challenges.map(
                          (challenge, index) => (
                            <li
                              key={index}
                              className="flex items-center gap-3 p-3 bg-orange-50 rounded-lg"
                            >
                              <span className="text-orange-500 text-lg mt-0.5">
                                ‚ö†
                              </span>
                              <span className="text-sm">{challenge}</span>
                            </li>
                          )
                        )}
                      </ul>
                    </div>
                  </div>

                  <Separator />

                  {/* Ngh·ªÅ nghi·ªáp v√† t√¨nh y√™u */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-3">
                      <h3 className="text-xl font-semibold text-blue-600 text-center">
                        Ngh·ªÅ nghi·ªáp ph√π h·ª£p
                      </h3>
                      <div className="flex flex-wrap gap-2 justify-center">
                        {getNumberMeaning(selectedNumber)?.career.map(
                          (career, index) => (
                            <Badge
                              key={index}
                              variant="outline"
                              className="px-3 py-1"
                            >
                              {career}
                            </Badge>
                          )
                        )}
                      </div>
                    </div>

                    <div className="space-y-3">
                      <h3 className="text-xl font-semibold text-pink-600 text-center">
                        T√¨nh y√™u
                      </h3>
                      <div className="flex flex-wrap gap-2 justify-center">
                        {getNumberMeaning(selectedNumber)?.love.map(
                          (love, index) => (
                            <Badge
                              key={index}
                              variant="outline"
                              className="px-3 py-1"
                            >
                              {love}
                            </Badge>
                          )
                        )}
                      </div>
                    </div>
                  </div>

                  {/* Th√¥ng tin b·ªï sung cho Master Numbers */}
                  {masterNumbers.find((m) => m.number === selectedNumber) && (
                    <>
                      <Separator />
                      <div className="text-center p-6 bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg">
                        <h3 className="text-xl font-semibold text-purple-600 mb-3">
                          ƒê·∫∑c bi·ªát v·ªÅ Master Number {selectedNumber}
                        </h3>
                        <p className="text-muted-foreground">
                          Master Numbers l√† nh·ªØng con s·ªë ƒë·∫∑c bi·ªát trong th·∫ßn s·ªë
                          h·ªçc, mang nƒÉng l∆∞·ª£ng m·∫°nh m·∫Ω v√† √Ω nghƒ©a s√¢u s·∫Øc. Ch√∫ng
                          th∆∞·ªùng xu·∫•t hi·ªán ·ªü nh·ªØng ng∆∞·ªùi c√≥ s·ª© m·ªánh ƒë·∫∑c bi·ªát
                          ho·∫∑c c√≥ ti·ªÅm nƒÉng ph√°t tri·ªÉn t√¢m linh cao.
                        </p>
                      </div>
                    </>
                  )}

                  {/* N√∫t h√†nh ƒë·ªông */}
                  <div className="text-center space-y-3">
                    {/* Link ƒë·∫øn b√†i vi·∫øt blog n·∫øu c√≥ */}
                    {selectedNumber && hasBlogPostForNumber(selectedNumber) && (
                      <div>
                        <Link
                          href={getBlogPostUrlForNumber(selectedNumber)!}
                          className="inline-block"
                        >
                          <Button className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700 text-white px-6 py-2">
                            üìö ƒê·ªçc b√†i vi·∫øt chi ti·∫øt v·ªÅ s·ªë {selectedNumber}
                          </Button>
                        </Link>
                        <p className="text-xs text-muted-foreground mt-2">
                          Kh√°m ph√° th√™m nhi·ªÅu th√¥ng tin h·ªØu √≠ch v·ªÅ con s·ªë n√†y
                        </p>
                      </div>
                    )}

                    <Button
                      variant="outline"
                      onClick={() => setSelectedNumber(null)}
                      className="px-6 py-2"
                    >
                      ‚úï ƒê√≥ng
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {/* Ph√¢n t√≠ch chi ti·∫øt s·ªë ch·ªß ƒë·∫°o */}
          {getNumberMeaning(results.lifePathNumber) && (
            <Card>
              <CardHeader>
                <CardTitle>
                  Ph√¢n t√≠ch chi ti·∫øt - S·ªë {results.lifePathNumber}
                </CardTitle>
                <CardDescription>
                  {getNumberMeaning(results.lifePathNumber)?.description}
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-semibold mb-2">T·ª´ kh√≥a ch√≠nh:</h4>
                  <div className="flex flex-wrap gap-2">
                    {getNumberMeaning(results.lifePathNumber)?.keywords.map(
                      (keyword, index) => (
                        <Badge key={index} variant="secondary">
                          {keyword}
                        </Badge>
                      )
                    )}
                  </div>
                </div>

                <Separator />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold mb-2 text-green-600">
                      ƒêi·ªÉm m·∫°nh:
                    </h4>
                    <ul className="space-y-1 text-sm">
                      {getNumberMeaning(results.lifePathNumber)?.strengths.map(
                        (strength, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <span className="text-green-500">‚úì</span>
                            {strength}
                          </li>
                        )
                      )}
                    </ul>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-2 text-orange-600">
                      Th√°ch th·ª©c:
                    </h4>
                    <ul className="space-y-1 text-sm">
                      {getNumberMeaning(results.lifePathNumber)?.challenges.map(
                        (challenge, index) => (
                          <li key={index} className="flex items-center gap-2">
                            <span className="text-orange-500">‚ö†</span>
                            {challenge}
                          </li>
                        )
                      )}
                    </ul>
                  </div>
                </div>

                <Separator />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-semibold mb-2 text-blue-600">
                      Ngh·ªÅ nghi·ªáp ph√π h·ª£p:
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {getNumberMeaning(results.lifePathNumber)?.career.map(
                        (career, index) => (
                          <Badge key={index} variant="outline">
                            {career}
                          </Badge>
                        )
                      )}
                    </div>
                  </div>

                  <div>
                    <h4 className="font-semibold mb-2 text-pink-600">
                      T√¨nh y√™u:
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {getNumberMeaning(results.lifePathNumber)?.love.map(
                        (love, index) => (
                          <Badge key={index} variant="outline">
                            {love}
                          </Badge>
                        )
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Ph√¢n t√≠ch t√™n */}
          {nameAnalysis && (
            <Card>
              <CardHeader>
                <CardTitle>Ph√¢n t√≠ch t√™n: {nameAnalysis.name}</CardTitle>
                <CardDescription>
                  Kh√°m ph√° √Ω nghƒ©a ·∫©n trong t√™n c·ªßa b·∫°n
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-4">
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-purple-600 mb-2">
                        {nameAnalysis.soulNumber}
                      </div>
                      <div className="text-sm font-medium">S·ªë Linh H·ªìn</div>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-pink-600 mb-2">
                        {nameAnalysis.expressionNumber}
                      </div>
                      <div className="text-sm font-medium">S·ªë Bi·ªÉu ƒê·∫°t</div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-blue-600 mb-2">
                        {nameAnalysis.personalityNumber}
                      </div>
                      <div className="text-sm font-medium">S·ªë Nh√¢n C√°ch</div>
                    </div>

                    <div className="text-center p-4 border rounded-lg">
                      <div className="text-2xl font-bold text-green-600 mb-2">
                        {nameAnalysis.hiddenPassionNumber}
                      </div>
                      <div className="text-sm font-medium">S·ªë ƒêam M√™ ·∫®n</div>
                    </div>
                  </div>
                </div>

                {nameAnalysis.karmicLessons.length > 0 && (
                  <div className="mt-4">
                    <h4 className="font-semibold mb-2 text-orange-600">
                      B√†i h·ªçc Karmic:
                    </h4>
                    <p className="text-sm text-muted-foreground mb-2">
                      Nh·ªØng con s·ªë thi·∫øu trong t√™n c·ªßa b·∫°n, ƒë·∫°i di·ªán cho nh·ªØng
                      b√†i h·ªçc c·∫ßn h·ªçc trong cu·ªôc s·ªëng:
                    </p>
                    <div className="flex flex-wrap gap-2">
                      {nameAnalysis.karmicLessons.map((number, index) => (
                        <Badge key={index} variant="destructive">
                          {number}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  );
}
